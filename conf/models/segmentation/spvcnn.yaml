# @package models
SPVCNN_Paper:
  class: sparseconv3d.APIModel
  conv_type: "SPARSE"
  backend: "torchsparse"
  backbone:
    define_constants:
      in_feat: 32
      block: ResBlock # Can be any of the blocks in modules/MinkowskiEngine/api_modules.py
    down_conv:
      module_name: ResNetDownPV
      block: block
      res: ${data.first_subsampling}
      N: [ 0, 2, 2, 2, 2 ]
      down_conv_nn:
        [
          [ FEAT, in_feat ],
          [ in_feat, in_feat ],
          [ in_feat, 2*in_feat ],
          [ 2*in_feat, 4*in_feat ],
          [ 4*in_feat, 8*in_feat ],
        ]
      point_nn:
        [
          None,
          None,
          None,
          None,
          [ in_feat, 8*in_feat ],
        ]
      kernel_size: 3
      stride: [ 1, 2, 2, 2, 2 ]
    up_conv:
      block: block
      module_name: ResNetUpPV
      res: ${data.first_subsampling}
      N: [ 2, 2, 2, 2 ]
      up_conv_nn:
        [
          [ 8*in_feat, 8*in_feat ],
          [ 8*in_feat, 4*in_feat ],
          [ 4*in_feat, 3*in_feat ],
          [ 3*in_feat, 3*in_feat ],
        ]
      point_nn:
        [
          None,
          [ 8*in_feat, 4*in_feat ],
          None,
          [ 4*in_feat, 3*in_feat ],
        ]
      skip_feats: [ 4*in_feat, 2*in_feat, in_feat, in_feat ] # should match down_conv_nn[-1][:,1]
      kernel_size: 3
      stride: [ 2, 2, 2, 2 ]
      dropout: 0.3

SPVCNN_ResUNet32:
  class: sparseconv3d.APIModel
  conv_type: "SPARSE"
  backend: "torchsparse"
  backbone:
    define_constants:
      in_feat: 32
      block: ResBlock # Can be any of the blocks in modules/MinkowskiEngine/api_modules.py
    down_conv:
      module_name: ResNetDownPV
      block: block
      res: ${data.first_subsampling}
      N: [ 0, 1, 2, 2, 3 ]
      down_conv_nn:
        [
          [ FEAT, in_feat ],
          [ in_feat, in_feat ],
          [ in_feat, 2*in_feat ],
          [ 2*in_feat, 4*in_feat ],
          [ 4*in_feat, 8*in_feat ],
        ]
      point_nn:
        [
          None,
          None,
          None,
          None,
          [ in_feat, 8*in_feat ],
        ]
      kernel_size: 3
      stride: [ 1, 2, 2, 2, 2 ]
    up_conv:
      block: block
      module_name: ResNetUpPV
      res: ${data.first_subsampling}
      N: [ 1, 1, 1, 1 ]
      up_conv_nn:
        [
          [ 8*in_feat, 4*in_feat ],
          [ 4*in_feat, 4*in_feat ],
          [ 4*in_feat, 3*in_feat ],
          [ 3*in_feat, 3*in_feat ],
        ]
      point_nn:
        [
          None,
          [ 8*in_feat, 4*in_feat ],
          None,
          [ 4*in_feat, 3*in_feat ],
        ]
      skip_feats: [ 4*in_feat, 2*in_feat, in_feat, in_feat ] # should match down_conv_nn[-1][:,1]
      kernel_size: 3
      stride: [ 2, 2, 2, 2 ]
      dropout: 0.3
      